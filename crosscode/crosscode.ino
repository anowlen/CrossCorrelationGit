#define F(string_literal) (reinterpret_cast<const __FlashStringHelper *>(PSTR(string_literal)))

void setup() {
    Serial.begin(115200);

//NEW DATA
/*
double x[] = {
  2.146607,
2.14654,
2.146458,
2.14638,
2.146329,
2.146318,
2.146357,
2.14644,
2.146552,
2.146667,
2.146754,
2.146786,
2.146741,
2.146617,
2.146419,
2.146175,
2.145919,
2.145692,
2.145532,
2.145463,
2.145502,
2.14564,
2.145858,
2.146125,
2.146401,
2.146648,
2.146836,
2.146945,
2.14697,
2.146919,
2.146803,
2.146651,
2.146482,
2.146321,
2.146186,
2.146089,
2.146034,
2.146024,
2.146056,
2.146121,
2.146214,
2.146327,
2.146449,
2.14657,
2.14668,
2.146772,
2.146835,
2.146866,
2.146864,
2.146831,
2.146774,
2.1467,
2.146627,
2.146561,
2.146512,
2.146485,
2.146481,
2.146494,
2.146518,
2.146541,
2.146557,
2.146559,
2.146545,
2.146518,
2.146486,
2.146455,
2.146434,
2.146431,
2.146449,
2.14648,
2.14652,
2.146558,
2.146584,
2.146587,
2.146561,
2.146508,
2.146435,
2.146351,
2.146273,
2.146216,
2.146193,
2.146212,
2.146278,
2.146383,
2.146518,
2.146667,
2.146816,
2.146944,
2.147039,
2.147094,
2.147101,
2.147065,
2.146994,
2.146898,
2.146788,
2.146678,
2.14658,
2.146503,
2.146453,
2.146433
};

double y[] = {
  1.156221,
1.156401,
1.1566,
1.156786,
1.156934,
1.157023,
1.157044,
1.157001,
1.156904,
1.156774,
1.156635,
1.156507,
1.156407,
1.156345,
1.156323,
1.15634,
1.156387,
1.156457,
1.156541,
1.156634,
1.156731,
1.156827,
1.156921,
1.157001,
1.157061,
1.157091,
1.157081,
1.15703,
1.156933,
1.156801,
1.156646,
1.156485,
1.156337,
1.15622,
1.15614,
1.156101,
1.156094,
1.156105,
1.156118,
1.156121,
1.156107,
1.156074,
1.156037,
1.156009,
1.156009,
1.156054,
1.156147,
1.156283,
1.15644,
1.156589,
1.156703,
1.156749,
1.156709,
1.156578,
1.156372,
1.156119,
1.155859,
1.155634,
1.155482,
1.155429,
1.155481,
1.15563,
1.155848,
1.156098,
1.156338,
1.156531,
1.156654,
1.156692,
1.156652,
1.156551,
1.156415,
1.156277,
1.156159,
1.156083,
1.156057,
1.156079,
1.156133,
1.156207,
1.156278,
1.156328,
1.156349,
1.156337,
1.156293,
1.15623,
1.156161,
1.156099,
1.156055,
1.156036,
1.156041,
1.156064,
1.156097,
1.15613,
1.156148,
1.156143,
1.156115,
1.156064,
1.155998,
1.155933,
1.155882,
1.15586
};
*/


/* old data
    double x[] = {
      2.508762,
2.509057,
2.509223,
2.509302,
2.50935,
2.509423,
2.509564,
2.509794,
2.510107,
2.510477,
2.510858,
2.511203,
2.51147,
2.511632,
2.511698,
2.511691,
2.511668,
2.511691,
2.511822,
2.512112,
2.512581,
2.513224,
2.513998,
2.514838,
2.515663,
2.516394,
2.516969,
2.517351,
2.517539,
2.517559,
2.517469,
2.517337,
2.517235,
2.51721,
2.5173,
2.5175,
2.517779,
2.518089,
2.518366,
2.51855,
2.518597,
2.518487,
2.518232,
2.517871,
2.517466,
2.517088,
2.516811,
2.516693,
2.516768,
2.517044,
2.517493,
2.518068,
2.518699,
2.519311,
2.519852,
2.520279,
2.520583,
2.520794,
2.520965,
2.521172,
2.5215,
2.522021,
2.522781,
2.523788,
2.525004,
2.526354,
2.527732,
2.529014,
2.530085,
2.530853,
2.531266,
2.531324,
2.531071,
2.530589,
2.529985,
2.529368,
2.528833,
2.528451,
2.528253,
2.528235,
2.528365,
2.528591,
2.528852,
2.529095,
2.529284,
2.529396,
2.529432,
2.529406,
2.529339,
2.529252,
2.529164,
2.529086,
2.529024,
2.528976,
2.528941,
2.528917,
2.528906,
2.528908,
2.528928,
2.528965};
    double y[] = {0.90878,
0.908953,
0.909204,
0.909498,
0.909791,
0.910049,
0.910256,
0.91041,
0.910528,
0.910647,
0.910804,
0.911035,
0.911364,
0.911796,
0.912313,
0.912876,
0.91343,
0.91392,
0.91429,
0.914497,
0.914526,
0.914375,
0.914072,
0.913659,
0.913188,
0.912708,
0.91226,
0.911873,
0.911555,
0.911301,
0.911088,
0.910891,
0.910681,
0.910416,
0.910101,
0.909723,
0.909299,
0.908861,
0.908445,
0.90809,
0.907841,
0.907723,
0.907743,
0.907896,
0.90814,
0.908421,
0.908671,
0.908809,
0.908763,
0.908478,
0.907924,
0.907106,
0.906065,
0.904859,
0.903578,
0.902337,
0.901221,
0.900337,
0.899757,
0.899523,
0.899656,
0.900154,
0.900971,
0.902045,
0.903279,
0.904561,
0.905762,
0.906754,
0.907414,
0.907649,
0.907415,
0.906724,
0.905654,
0.904331,
0.902922,
0.901595,
0.900502,
0.89975,
0.899386,
0.899385,
0.899662,
0.900081,
0.900488,
0.900738,
0.900724,
0.9004,
0.899786,
0.898962,
0.898047,
0.897172,
0.896442,
0.895926,
0.89563,
0.895506,
0.895461,
0.895383,
0.895165,
0.894734,
0.894068,
0.893202};
*/


//double x[] = {2,0,-2,0,4,-4,0,0,0,0};
//double y[] = {0,0,0,0,1,0,-1,0,3,-3};

/* using from 11-14 seconds is too big "data section exceeds available space in board"
double x[] = {2.510697,
2.510625,
2.510609,
2.510629,
2.510661,
2.510679,
2.510658,
2.510584,
2.510456,
2.510284,
2.510087,
2.509892,
2.509726,
2.509607,
2.509544,
2.509537,
2.509567,
2.509612,
2.509646,
2.509645,
2.509594,
2.509492,
2.509348,
2.509183,
2.509019,
2.508886,
2.5088,
2.508771,
2.508797,
2.508866,
2.508955,
2.509044,
2.509114,
2.50915,
2.509147,
2.509112,
2.509051,
2.50898,
2.508905,
2.508823,
2.508745,
2.508647,
2.508529,
2.508387,
2.508216,
2.508029,
2.507851,
2.507707,
2.507627,
2.50764,
2.507755,
2.507974,
2.508279,
2.508633,
2.508994,
2.509314,
2.509553,
2.509684,
2.509697,
2.509605,
2.509437,
2.509233,
2.509038,
2.508891,
2.508823,
2.508845,
2.508957,
2.509141,
2.509365,
2.509599,
2.509812,
2.509981,
2.51009,
2.510137,
2.510131,
2.510081,
2.51001,
2.509937,
2.509876,
2.509841,
2.509842,
2.50988,
2.509952,
2.510055,
2.510181,
2.510318,
2.510459,
2.510589,
2.510702,
2.510791,
2.510852,
2.510886,
2.510896,
2.510893,
2.510885,
2.510884,
2.510899,
2.510934,
2.51099,
2.511059,
2.511133,
2.511202,
2.511254,
2.51128,
2.511279,
2.511254,
2.511211,
2.511165,
2.511127,
2.511108,
2.511115,
2.511148,
2.511203,
2.511272,
2.511346,
2.511414,
2.511474,
2.511525,
2.511569,
2.511613,
2.511665,
2.511729,
2.511805,
2.511884,
2.511957,
2.512007,
2.51202,
2.511985,
2.511897,
2.511756,
2.511576,
2.511372,
2.511165,
2.510973,
2.510808,
2.510679,
2.510583,
2.510509,
2.51044,
2.510355,
2.510237,
2.51007,
2.509846,
2.509566,
2.509234,
2.508863,
2.508469,
2.508071,
2.507686,
2.50733,
2.507015,
2.506747,
2.506535,
2.506373,
2.506253,
2.506167,
2.506093,
2.506009,
2.505896,
2.505732,
2.505504,
2.505211,
2.50486,
2.504474,
2.504084,
2.503727,
2.503437,
2.503239,
2.503143,
2.503147,
2.503224,
2.503339,
2.50345,
2.503518,
2.503515,
2.503431,
2.503276,
2.503073,
2.502858,
2.502665,
2.502523,
2.502441,
2.502413,
2.502416,
2.502412,
2.502369,
2.502257,
2.502068,
2.501814,
2.501522,
2.501234,
2.500999,
2.500848,
2.500798,
2.500842,
2.500941,
2.501049,
2.501109,
2.501075,
2.500917,
2.500631,
2.500255,
2.49983,
2.499427,
2.499108,
2.498922,
2.498893,
2.499015,
2.499252,
2.499553,
2.499849,
2.500085,
2.500213,
2.500216,
2.500096,
2.499877,
2.499594,
2.49929,
2.499001,
2.498749,
2.498545,
2.498391,
2.498275,
2.498184,
2.498113,
2.498059,
2.498021,
2.498006,
2.498018,
2.498054,
2.498108,
2.498163,
2.498195,
2.498184,
2.498115,
2.497981,
2.497792,
2.497573,
2.497354,
2.497172,
2.497063,
2.49705,
2.497142,
2.497332,
2.497598,
2.497904,
2.498217,
2.498505,
2.49875,
2.498945,
2.499099,
2.499235,
2.499381,
2.499565,
2.499812,
2.500133,
2.500526,
2.50098,
2.501472,
2.501976,
2.502466,
2.502928,
2.503353,
2.503745,
2.504115,
2.504479,
2.504851,
2.505237,
2.505636,
2.506036,
2.506415,
2.506752,
2.507023,
2.507217,
2.507331,
2.507372,
2.507359,
2.507317,
2.507274,
2.507244,
2.507231,
2.507227,
2.50721,
2.507146,
2.507008,
2.506774,
2.506438,
2.506021,
2.50556,
2.505115,
2.504751,
2.504531,
2.504503,
2.50469,
2.505087,
2.505657,
2.506339,
2.507056,
2.507739,
2.50832,
2.508762,
2.509057,
2.509223,
2.509302,
2.50935,
2.509423,
2.509564,
2.509794,
2.510107,
2.510477,
2.510858,
2.511203,
2.51147,
2.511632,
2.511698,
2.511691,
2.511668,
2.511691,
2.511822,
2.512112,
2.512581,
2.513224,
2.513998,
2.514838,
2.515663,
2.516394,
2.516969,
2.517351,
2.517539,
2.517559,
2.517469,
2.517337,
2.517235,
2.51721,
2.5173,
2.5175,
2.517779,
2.518089,
2.518366,
2.51855,
2.518597,
2.518487,
2.518232,
2.517871,
2.517466,
2.517088,
2.516811,
2.516693,
2.516768,
2.517044,
2.517493,
2.518068,
2.518699,
2.519311,
2.519852,
2.520279,
2.520583,
2.520794,
2.520965,
2.521172,
2.5215,
2.522021,
2.522781,
2.523788,
2.525004,
2.526354,
2.527732,
2.529014,
2.530085,
2.530853,
2.531266,
2.531324,
2.531071,
2.530589,
2.529985,
2.529368,
2.528833,
2.528451,
2.528253,
2.528235,
2.528365,
2.528591,
2.528852,
2.529095,
2.529284,
2.529396,
2.529432,
2.529406,
2.529339,
2.529252,
2.529164,
2.529086,
2.529024,
2.528976,
2.528941,
2.528917,
2.528906,
2.528908,
2.528928,
2.528965
};

double y[] = {
  0.90541,
0.905281,
0.905087,
0.904858,
0.904622,
0.904408,
0.904237,
0.904113,
0.904038,
0.903997,
0.903968,
0.903935,
0.90388,
0.903793,
0.903675,
0.903535,
0.903384,
0.90324,
0.903113,
0.903014,
0.90294,
0.902889,
0.902846,
0.902798,
0.902733,
0.902642,
0.902518,
0.902365,
0.902186,
0.901993,
0.901793,
0.901597,
0.901415,
0.901247,
0.901102,
0.900981,
0.900889,
0.900829,
0.900794,
0.900772,
0.900764,
0.900742,
0.900691,
0.900598,
0.900446,
0.900232,
0.89997,
0.899686,
0.899414,
0.899191,
0.899063,
0.899058,
0.89919,
0.899454,
0.899818,
0.900232,
0.900638,
0.900974,
0.901193,
0.901259,
0.901165,
0.900929,
0.900586,
0.900187,
0.899787,
0.899432,
0.899156,
0.898975,
0.898897,
0.898901,
0.898966,
0.899074,
0.8992,
0.899332,
0.899465,
0.8996,
0.899736,
0.899873,
0.900005,
0.900124,
0.900211,
0.900255,
0.900241,
0.900162,
0.900025,
0.899843,
0.899631,
0.899418,
0.899228,
0.899072,
0.898964,
0.898904,
0.898881,
0.898885,
0.898902,
0.898926,
0.898949,
0.89898,
0.899027,
0.899103,
0.899219,
0.899378,
0.899578,
0.899806,
0.900041,
0.900261,
0.900446,
0.900582,
0.900665,
0.900701,
0.900706,
0.9007,
0.900702,
0.900725,
0.900777,
0.900849,
0.900926,
0.900987,
0.901013,
0.900991,
0.900918,
0.900806,
0.900676,
0.900563,
0.900498,
0.900513,
0.900624,
0.900834,
0.901131,
0.901486,
0.90186,
0.90221,
0.902499,
0.902693,
0.902777,
0.90275,
0.902626,
0.902428,
0.902194,
0.901965,
0.901773,
0.901658,
0.90165,
0.901764,
0.902011,
0.902389,
0.902875,
0.903448,
0.904065,
0.904676,
0.90524,
0.905706,
0.906039,
0.90622,
0.906248,
0.906142,
0.905939,
0.905687,
0.905434,
0.905228,
0.905097,
0.905051,
0.905086,
0.905165,
0.905249,
0.905303,
0.905283,
0.905169,
0.904968,
0.904688,
0.904364,
0.904034,
0.903734,
0.903486,
0.903299,
0.903166,
0.903065,
0.902975,
0.902871,
0.90275,
0.90261,
0.902474,
0.902369,
0.902319,
0.902347,
0.902455,
0.902625,
0.902817,
0.902976,
0.903055,
0.903016,
0.902833,
0.902524,
0.902134,
0.901716,
0.901351,
0.901106,
0.901031,
0.901139,
0.901404,
0.901779,
0.902182,
0.902524,
0.902731,
0.902752,
0.902564,
0.90218,
0.901652,
0.90105,
0.900453,
0.899932,
0.899544,
0.899319,
0.899263,
0.899358,
0.89958,
0.899883,
0.90023,
0.900583,
0.900911,
0.901193,
0.901407,
0.901544,
0.901597,
0.901556,
0.901428,
0.901227,
0.900976,
0.900703,
0.90045,
0.900258,
0.900158,
0.900175,
0.90032,
0.900585,
0.900945,
0.901367,
0.901807,
0.902237,
0.902627,
0.902959,
0.903241,
0.903486,
0.903715,
0.903964,
0.904253,
0.904596,
0.904999,
0.905448,
0.905931,
0.906423,
0.906897,
0.907338,
0.907737,
0.90809,
0.908408,
0.908702,
0.908986,
0.909263,
0.909535,
0.909792,
0.91001,
0.910162,
0.910225,
0.910179,
0.910025,
0.909774,
0.909465,
0.909147,
0.908878,
0.908716,
0.908701,
0.908857,
0.909169,
0.909601,
0.910088,
0.910559,
0.910933,
0.911149,
0.911166,
0.910981,
0.910623,
0.910148,
0.909635,
0.909158,
0.908792,
0.908576,
0.908528,
0.908627,
0.908828,
0.90907,
0.909289,
0.909434,
0.909476,
0.90941,
0.909257,
0.909063,
0.908877,
0.908747,
0.908709,
0.90878,
0.908953,
0.909204,
0.909498,
0.909791,
0.910049,
0.910256,
0.91041,
0.910528,
0.910647,
0.910804,
0.911035,
0.911364,
0.911796,
0.912313,
0.912876,
0.91343,
0.91392,
0.91429,
0.914497,
0.914526,
0.914375,
0.914072,
0.913659,
0.913188,
0.912708,
0.91226,
0.911873,
0.911555,
0.911301,
0.911088,
0.910891,
0.910681,
0.910416,
0.910101,
0.909723,
0.909299,
0.908861,
0.908445,
0.90809,
0.907841,
0.907723,
0.907743,
0.907896,
0.90814,
0.908421,
0.908671,
0.908809,
0.908763,
0.908478,
0.907924,
0.907106,
0.906065,
0.904859,
0.903578,
0.902337,
0.901221,
0.900337,
0.899757,
0.899523,
0.899656,
0.900154,
0.900971,
0.902045,
0.903279,
0.904561,
0.905762,
0.906754,
0.907414,
0.907649,
0.907415,
0.906724,
0.905654,
0.904331,
0.902922,
0.901595,
0.900502,
0.89975,
0.899386,
0.899385,
0.899662,
0.900081,
0.900488,
0.900738,
0.900724,
0.9004,
0.899786,
0.898962,
0.898047,
0.897172,
0.896442,
0.895926,
0.89563,
0.895506,
0.895461,
0.895383,
0.895165,
0.894734,
0.894068,
0.893202
};
*/



//[11,13) //doesnt print out anything on serial monitor
double x[] = {
  2.510697,
2.510625,
2.510609,
2.510629,
2.510661,
2.510679,
2.510658,
2.510584,
2.510456,
2.510284,
2.510087,
2.509892,
2.509726,
2.509607,
2.509544,
2.509537,
2.509567,
2.509612,
2.509646,
2.509645,
2.509594,
2.509492,
2.509348,
2.509183,
2.509019,
2.508886,
2.5088,
2.508771,
2.508797,
2.508866,
2.508955,
2.509044,
2.509114,
2.50915,
2.509147,
2.509112,
2.509051,
2.50898,
2.508905,
2.508823,
2.508745,
2.508647,
2.508529,
2.508387,
2.508216,
2.508029,
2.507851,
2.507707,
2.507627,
2.50764,
2.507755,
2.507974,
2.508279,
2.508633,
2.508994,
2.509314,
2.509553,
2.509684,
2.509697,
2.509605,
2.509437,
2.509233,
2.509038,
2.508891,
2.508823,
2.508845,
2.508957,
2.509141,
2.509365,
2.509599,
2.509812,
2.509981,
2.51009,
2.510137,
2.510131,
2.510081,
2.51001,
2.509937,
2.509876,
2.509841,
2.509842,
2.50988,
2.509952,
2.510055,
2.510181,
2.510318,
2.510459,
2.510589,
2.510702,
2.510791,
2.510852,
2.510886,
2.510896,
2.510893,
2.510885,
2.510884,
2.510899,
2.510934,
2.51099,
2.511059,
2.511133,
2.511202,
2.511254,
2.51128,
2.511279,
2.511254,
2.511211,
2.511165,
2.511127,
2.511108,
2.511115,
2.511148,
2.511203,
2.511272,
2.511346,
2.511414,
2.511474,
2.511525,
2.511569,
2.511613,
2.511665,
2.511729,
2.511805,
2.511884,
2.511957,
2.512007,
2.51202,
2.511985,
2.511897,
2.511756,
2.511576,
2.511372,
2.511165,
2.510973,
2.510808,
2.510679,
2.510583,
2.510509,
2.51044,
2.510355,
2.510237,
2.51007,
2.509846,
2.509566,
2.509234,
2.508863,
2.508469,
2.508071,
2.507686,
2.50733,
2.507015,
2.506747,
2.506535,
2.506373,
2.506253,
2.506167,
2.506093,
2.506009,
2.505896,
2.505732,
2.505504,
2.505211,
2.50486,
2.504474,
2.504084,
2.503727,
2.503437,
2.503239,
2.503143,
2.503147,
2.503224,
2.503339,
2.50345,
2.503518,
2.503515,
2.503431,
2.503276,
2.503073,
2.502858,
2.502665,
2.502523,
2.502441,
2.502413,
2.502416,
2.502412,
2.502369,
2.502257,
2.502068,
2.501814,
2.501522,
2.501234,
2.500999,
2.500848,
2.500798,
2.500842,
2.500941,
2.501049,
2.501109,
2.501075,
2.500917
};

double y[] = {
  0.90541,
0.905281,
0.905087,
0.904858,
0.904622,
0.904408,
0.904237,
0.904113,
0.904038,
0.903997,
0.903968,
0.903935,
0.90388,
0.903793,
0.903675,
0.903535,
0.903384,
0.90324,
0.903113,
0.903014,
0.90294,
0.902889,
0.902846,
0.902798,
0.902733,
0.902642,
0.902518,
0.902365,
0.902186,
0.901993,
0.901793,
0.901597,
0.901415,
0.901247,
0.901102,
0.900981,
0.900889,
0.900829,
0.900794,
0.900772,
0.900764,
0.900742,
0.900691,
0.900598,
0.900446,
0.900232,
0.89997,
0.899686,
0.899414,
0.899191,
0.899063,
0.899058,
0.89919,
0.899454,
0.899818,
0.900232,
0.900638,
0.900974,
0.901193,
0.901259,
0.901165,
0.900929,
0.900586,
0.900187,
0.899787,
0.899432,
0.899156,
0.898975,
0.898897,
0.898901,
0.898966,
0.899074,
0.8992,
0.899332,
0.899465,
0.8996,
0.899736,
0.899873,
0.900005,
0.900124,
0.900211,
0.900255,
0.900241,
0.900162,
0.900025,
0.899843,
0.899631,
0.899418,
0.899228,
0.899072,
0.898964,
0.898904,
0.898881,
0.898885,
0.898902,
0.898926,
0.898949,
0.89898,
0.899027,
0.899103,
0.899219,
0.899378,
0.899578,
0.899806,
0.900041,
0.900261,
0.900446,
0.900582,
0.900665,
0.900701,
0.900706,
0.9007,
0.900702,
0.900725,
0.900777,
0.900849,
0.900926,
0.900987,
0.901013,
0.900991,
0.900918,
0.900806,
0.900676,
0.900563,
0.900498,
0.900513,
0.900624,
0.900834,
0.901131,
0.901486,
0.90186,
0.90221,
0.902499,
0.902693,
0.902777,
0.90275,
0.902626,
0.902428,
0.902194,
0.901965,
0.901773,
0.901658,
0.90165,
0.901764,
0.902011,
0.902389,
0.902875,
0.903448,
0.904065,
0.904676,
0.90524,
0.905706,
0.906039,
0.90622,
0.906248,
0.906142,
0.905939,
0.905687,
0.905434,
0.905228,
0.905097,
0.905051,
0.905086,
0.905165,
0.905249,
0.905303,
0.905283,
0.905169,
0.904968,
0.904688,
0.904364,
0.904034,
0.903734,
0.903486,
0.903299,
0.903166,
0.903065,
0.902975,
0.902871,
0.90275,
0.90261,
0.902474,
0.902369,
0.902319,
0.902347,
0.902455,
0.902625,
0.902817,
0.902976,
0.903055,
0.903016,
0.902833,
0.902524,
0.902134,
0.901716,
0.901351,
0.901106,
0.901031,
0.901139,
0.901404
};


//pinMode(A0,INPUT);
//pinMode(A1,INPUT);

    int n = sizeof(x) / sizeof(x[0]); 

    double mx = 0, my = 0, sx = 0, sy = 0, sxy, r;
    
    // Calculate mean
    for (int i = 0; i < n; i++) {
        mx += x[i];
        my += y[i];
    }
    mx /= n;
    my /= n;

    // calculate denominator
    for (int i = 0; i < n; i++) {
        sx += (x[i] - mx) * (x[i] - mx);
        sy += (y[i] - my) * (y[i] - my);
    }
    double denom = sqrt(sx * sy);

    //int maxShift = n / 2;  // Maximum shift range ->have to divide by 2
    int maxShift2 = 100; //this makes it match the matlab
    const float Ts = 0.01; //sample rate
    Serial.println("delay,correlation");  //Serial Plotter

    float highr = -1.0;
    float highshift = 0;
    // Calculate and print cross-correlation
    for (int shift = -maxShift2; shift <= maxShift2; shift++) { //og maxShift
        sxy = 0;
        
        for (int i = 0; i < n; i++) {
            int j = i + shift;
            if (j < 0 || j >= n) continue;
            //if (j < 0 || j >= n){
              //sxy += (x[i] - mx) * (-my);
            //}
            else{
              sxy += (x[i] - mx) * (y[j] - my); 
            }
            
        }
        
        r = sxy / denom;
        //Serial.print("Denom: ");
        //Serial.println(denom);

        if (r > highr){
          highr = r;
          highshift = shift *Ts; //og just shift
        }
        float delaySec = shift * Ts; //og not here
        //shift = shift * .01;
        // serial plotter show shift and cros correlation
        Serial.print((delaySec));//unshow this on the graph, og shift
        Serial.print(",");  
        //Serial.println(F(r,3));  // Correlation coefficient (y-axis)
        

        delay(100); 
    }
    Serial.print("highest r: ");
    int round = (int)(highr+.5*highr);
    Serial.println(F(round));
    //Serial.println(F(highr,3));
    Serial.print("corresponding shift: ");
    //Serial.println(F(highshift),3);
}



//circular shift below
//double x[] = {2, 0, -2, 0, 4, -4, 0, 0, 0, 0};
//double y[] = {0, 0, 0, 0, 1, 0, -1, 0, 3, -3};
/*
    int n = sizeof(x) / sizeof(x[0]);

    double mx = 0, my = 0, sx = 0, sy = 0, sxy, r;

    // Calculate mean
    for (int i = 0; i < n; i++) {
        mx += x[i];
        my += y[i];
    }
    mx /= n;
    my /= n;

    // Calculate denominator
    for (int i = 0; i < n; i++) {
        sx += (x[i] - mx) * (x[i] - mx);
        sy += (y[i] - my) * (y[i] - my);
    }
    double denom = sqrt(sx * sy);

    int maxshift = n;  // full range, circular do not wrap

    Serial.println("shift,correlation");  // Serial Plotter

    float highr = -1.0;
    int highshift = 0;

    // Calculate and print circular cross-correlation
    for (int shift = -maxshift; shift < maxshift; shift++) {
        sxy = 0;

        for (int i = 0; i < n; i++) {
            int j = i + shift;
            while (j < 0) j += n;
            j %= n;
            sxy += (x[i] - mx) * (y[j] - my);
        }

        r = sxy / denom;
        
        if (r > highr) {
            highr = r;
            highshift = shift;
        }

        // Serial Plotter
        Serial.print(shift);    // x-axis
        Serial.print(",");
        Serial.println(r, 3);   // y-axis

        delay(100);  
    }

    Serial.print("highest r: ");
    Serial.println(highr, 3);
    Serial.print("corresponding shift: ");
    Serial.println(highshift);
}
*/



void loop() {
  
}
